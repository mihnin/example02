"""
–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö.

–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Streamlit –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
–¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
"""

import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
from typing import Dict, List, Optional

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from data_loader import (
    load_sales_data,
    filter_data_by_date,
    get_date_range,
    validate_data,
    prepare_data_summary,
    validate_file_format
)
from help_page import display_help_page, show_help_in_sidebar
from analysis import (
    calculate_basic_statistics,
    calculate_kpi_metrics,
    calculate_moving_average,
    detect_anomalies,
    calculate_correlation_matrix,
    generate_insights
)
from plotting import (
    create_sales_timeline,
    create_product_comparison,
    create_heatmap,
    create_correlation_matrix,
    create_seasonal_plot,
    create_growth_chart,
    create_distribution_plot
)


def setup_page_config() -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit."""
    st.set_page_config(
        page_title="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¢—Ä–∞—Ñ–∏–∫–∞ –í–µ–±-—Å–∞–π—Ç–∞",
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded"
    )


def setup_navigation() -> str:
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    Returns:
        str: –í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    """
    st.sidebar.title("üîß –ù–∞–≤–∏–≥–∞—Ü–∏—è")

    page = st.sidebar.radio(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É:",
        ["üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "üìö –°–ø—Ä–∞–≤–∫–∞"],
        index=0
    )

    st.sidebar.markdown("---")
    return page


def display_header() -> None:
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    st.title("üìä –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¢—Ä–∞—Ñ–∏–∫–∞ –í–µ–±-—Å–∞–π—Ç–∞")
    st.markdown("---")
    st.markdown(
        """
        –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö!
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∞–Ω–∞–ª–∏–∑–∞.
        """
    )


def handle_file_upload() -> Optional[pd.DataFrame]:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    Returns:
        Optional[pd.DataFrame]: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None
    """
    st.sidebar.subheader("üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

    # –í—ã–±–æ—Ä –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_source = st.sidebar.radio(
        "–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:",
        ["üìä –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ", "‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª"],
        index=0
    )

    if data_source == "‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª":
        uploaded_file = st.sidebar.file_uploader(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏",
            type=['xlsx', 'xls', 'csv'],
            help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: Excel (.xlsx, .xls) –∏ CSV (.csv)"
        )

        if uploaded_file is not None:
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞..."):
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    df = load_sales_data(uploaded_file=uploaded_file)

                    if not df.empty:
                        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ñ–∞–π–ª
                        validation_result = validate_file_format(df, uploaded_file.name)

                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                        if validation_result['errors']:
                            st.sidebar.error("‚ùå –û—à–∏–±–∫–∏ –≤ —Ñ–∞–π–ª–µ:")
                            for error in validation_result['errors']:
                                st.sidebar.error(f"‚Ä¢ {error}")

                        if validation_result['warnings']:
                            st.sidebar.warning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
                            for warning in validation_result['warnings']:
                                st.sidebar.warning(f"‚Ä¢ {warning}")

                        if validation_result['is_valid']:
                            st.sidebar.success("‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")
                            return df
                        else:
                            st.sidebar.error("‚ùå –§–∞–π–ª –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é")
                            return None

                except Exception as e:
                    st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
                    return None
        else:
            st.sidebar.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return None

    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        try:
            df = load_sales_data()
            if not df.empty:
                st.sidebar.success("‚úÖ –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                return df
            else:
                st.sidebar.warning("‚ö†Ô∏è –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return None
        except Exception as e:
            st.sidebar.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            return None


def create_sidebar_controls(df: pd.DataFrame) -> Dict:
    """
    –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏.

    Args:
        df (pd.DataFrame): DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏

    Returns:
        Dict: –°–ª–æ–≤–∞—Ä—å —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏–∑ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    """
    st.sidebar.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö
    min_date, max_date = get_date_range(df)

    # –≠–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞—Ç–∞–º–∏
    st.sidebar.subheader("üìÖ –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç")
    start_date = st.sidebar.date_input(
        "–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞",
        value=min_date,
        min_value=min_date,
        max_value=max_date
    )

    end_date = st.sidebar.date_input(
        "–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞",
        value=max_date,
        min_value=min_date,
        max_value=max_date
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
    if start_date > end_date:
        st.sidebar.error("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π!")
        start_date = min_date
        end_date = max_date

    # –û–ø—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    st.sidebar.subheader("üìà –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä–∞—Ñ–∏–∫–æ–≤")
    smoothing = st.sidebar.checkbox(
        "–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ (—Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ)",
        value=False,
        help="–î–æ–±–∞–≤–ª—è–µ—Ç –ª–∏–Ω–∏—é —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫"
    )

    smoothing_window = 7
    if smoothing:
        smoothing_window = st.sidebar.slider(
            "–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è (–¥–Ω–∏)",
            min_value=3,
            max_value=30,
            value=7,
            step=1
        )

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    st.sidebar.subheader("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    show_anomalies = st.sidebar.checkbox(
        "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π",
        value=False,
        help="–í—ã–¥–µ–ª—è–µ—Ç –Ω–µ–æ–±—ã—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã—Ö"
    )

    chart_type = st.sidebar.selectbox(
        "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
        options=["bar", "pie", "donut"],
        index=0,
        format_func=lambda x: {
            "bar": "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞",
            "pie": "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞",
            "donut": "–ö–æ–ª—å—Ü–µ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"
        }[x]
    )

    return {
        'start_date': start_date,
        'end_date': end_date,
        'smoothing': smoothing,
        'smoothing_window': smoothing_window,
        'show_anomalies': show_anomalies,
        'chart_type': chart_type
    }


def display_kpi_metrics(metrics: Dict) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç KPI –º–µ—Ç—Ä–∏–∫–∏ –≤ –∫–æ–ª–æ–Ω–∫–∞—Ö.

    Args:
        metrics (Dict): –°–ª–æ–≤–∞—Ä—å —Å KPI –º–µ—Ç—Ä–∏–∫–∞–º–∏
    """
    st.subheader("üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")

    if not metrics:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å KPI –º–µ—Ç—Ä–∏–∫–∏")
        return

    col1, col2, col3, col4 = st.columns(4)

    with col1:
        st.metric(
            label="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π",
            value=f"{metrics.get('total_sessions', 0):,}",
            delta=None
        )

    with col2:
        avg_sessions = metrics.get('avg_daily_sessions', 0)
        st.metric(
            label="–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π –≤ –¥–µ–Ω—å",
            value=f"{avg_sessions:,.1f}",
            delta=None
        )

    with col3:
        st.metric(
            label="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Å—Å–∏–π",
            value=f"{metrics.get('max_daily_sessions', 0):,}",
            delta=None
        )

    with col4:
        growth_rate = metrics.get('growth_rate', 0)
        delta_color = "normal" if growth_rate >= 0 else "inverse"
        st.metric(
            label="–û–±—â–∏–π —Ç–µ–º–ø —Ä–æ—Å—Ç–∞",
            value=f"{growth_rate:+.1f}%",
            delta=f"{growth_rate:+.1f}%",
            delta_color=delta_color
        )


def display_main_chart(df: pd.DataFrame, params: Dict) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ä—è–¥–∞.

    Args:
        df (pd.DataFrame): DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        params (Dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    """
    st.subheader("üìà –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–µ—Å—Å–∏–π")

    if df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        return

    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = create_sales_timeline(
        df,
        title="–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –≤—Ä–µ–º–µ–Ω–∏",
        smoothing=params['smoothing'],
        window=params['smoothing_window']
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
    if params['show_anomalies']:
        anomalies = detect_anomalies(df, threshold=2.0, method='zscore')
        if anomalies:
            st.info("üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–Ω–æ–º–∞–ª–∏–∏ –≤ –¥–∞–Ω–Ω—ã—Ö (–æ—Ç–º–µ—á–µ–Ω—ã –∫—Ä–∞—Å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏)")

    st.plotly_chart(fig, use_container_width=True)


def display_product_analysis(df: pd.DataFrame, params: Dict) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º.

    Args:
        df (pd.DataFrame): DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        params (Dict): –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    """
    st.subheader("üîç –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º")

    if df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤")
        return

    col1, col2 = st.columns(2)

    with col1:
        # –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        comparison_fig = create_product_comparison(df, params['chart_type'])
        st.plotly_chart(comparison_fig, use_container_width=True)

    with col2:
        # –ö–æ—Ä—Ä–µ–ª—è—Ü–∏–æ–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞
        correlation_matrix = calculate_correlation_matrix(df)
        if not correlation_matrix.empty:
            correlation_fig = create_correlation_matrix(correlation_matrix)
            st.plotly_chart(correlation_fig, use_container_width=True)


def display_additional_charts(df: pd.DataFrame) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏.

    Args:
        df (pd.DataFrame): DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    st.subheader("üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

    if df.empty:
        return

    col1, col2 = st.columns(2)

    with col1:
        # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
        heatmap_fig = create_heatmap(df)
        st.plotly_chart(heatmap_fig, use_container_width=True)

    with col2:
        # –ì—Ä–∞—Ñ–∏–∫ —Ä–æ—Å—Ç–∞
        growth_fig = create_growth_chart(df)
        st.plotly_chart(growth_fig, use_container_width=True)

    # –°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
    st.subheader("üåç –°–µ–∑–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
    product_tabs = st.tabs(df.columns.tolist())

    for i, product in enumerate(df.columns):
        with product_tabs[i]:
            seasonal_fig = create_seasonal_plot(df, product)
            st.plotly_chart(seasonal_fig, use_container_width=True)


def display_data_table(df: pd.DataFrame) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –¥–∞–Ω–Ω—ã–º–∏.

    Args:
        df (pd.DataFrame): DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ –¥–∞–Ω–Ω—ã—Ö")

    if df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ç–∞–±–ª–∏—Ü–µ")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–æ–ª–±–µ—Ü
    display_df = df.copy()
    display_df['–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏'] = df.sum(axis=1)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    display_df.index = display_df.index.strftime('%Y-%m-%d')

    st.dataframe(
        display_df,
        use_container_width=True,
        height=400
    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    csv = display_df.to_csv(encoding='utf-8-sig')
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
        data=csv,
        file_name=f"sales_data_{datetime.now().strftime('%Y%m%d')}.csv",
        mime="text/csv"
    )


def display_insights(df: pd.DataFrame, statistics: Dict) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã.

    Args:
        df (pd.DataFrame): DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
        statistics (Dict): –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    """
    st.subheader("üí° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã")

    insights = generate_insights(df, statistics)

    if insights:
        for i, insight in enumerate(insights, 1):
            st.info(f"**{i}.** {insight}")
    else:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö")


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    setup_page_config()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    current_page = setup_navigation()

    if current_page == "üìö –°–ø—Ä–∞–≤–∫–∞":
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–º–æ—â–∏
        display_help_page()
        return

    # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
    display_header()

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        df = handle_file_upload()

        if df is None:
            st.info("üëÜ –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞")
            show_help_in_sidebar()
            return

        if df.empty or not validate_data(df):
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
            show_help_in_sidebar()
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        params = create_sidebar_controls(df)

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É
        filtered_df = filter_data_by_date(df, params['start_date'], params['end_date'])

        if filtered_df.empty:
            st.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –¥–∞—Ç")
            return

        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫
        with st.spinner("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö..."):
            statistics = calculate_basic_statistics(filtered_df)
            kpi_metrics = calculate_kpi_metrics(filtered_df)

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ KPI –º–µ—Ç—Ä–∏–∫
        display_kpi_metrics(kpi_metrics)

        st.markdown("---")

        # –û—Å–Ω–æ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        display_main_chart(filtered_df, params)

        st.markdown("---")

        # –ê–Ω–∞–ª–∏–∑ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º
        display_product_analysis(filtered_df, params)

        st.markdown("---")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏
        display_additional_charts(filtered_df)

        st.markdown("---")

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã
        display_insights(filtered_df, statistics)

        st.markdown("---")

        # –¢–∞–±–ª–∏—Ü–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
        display_data_table(filtered_df)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
        st.sidebar.markdown("---")
        st.sidebar.subheader("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö")

        data_summary = prepare_data_summary(filtered_df)
        if data_summary:
            st.sidebar.write(f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π:** {data_summary.get('total_rows', 0)}")
            st.sidebar.write(f"**–ü–µ—Ä–∏–æ–¥:** {data_summary.get('date_range', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
            st.sidebar.write(f"**–ü—Ä–æ–¥—É–∫—Ç—ã:** {len(data_summary.get('columns', []))}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é —Å–ø—Ä–∞–≤–∫—É –≤ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
        show_help_in_sidebar()

    except Exception as e:
        st.error(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        show_help_in_sidebar()


if __name__ == "__main__":
    main()